/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ma.solide.openAPI.api;

import ma.solide.openAPI.model.ArticleDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-12T11:03:46.544768828+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "articles", description = "the articles API")
public interface ArticlesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /articles : List all articles
     *
     * @param limit  (optional)
     * @return A list of articles (status code 200)
     */
    @Operation(
        operationId = "getArticles",
        summary = "List all articles",
        tags = { "articles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of articles", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ArticleDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/articles",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ArticleDto>> getArticles(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"id\" : 0, \"tag\" : \"tag\" }, { \"name\" : \"name\", \"id\" : 0, \"tag\" : \"tag\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /articles/{artNo} : Info for a specific Article
     *
     * @param artNo  (required)
     * @return Article found (status code 200)
     *         or Article not found (status code 404)
     */
    @Operation(
        operationId = "getProductByArtNo",
        summary = "Info for a specific Article",
        responses = {
            @ApiResponse(responseCode = "200", description = "Article found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArticleDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Article not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/articles/{artNo}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ArticleDto> getProductByArtNo(
        @Parameter(name = "artNo", description = "", required = true, in = ParameterIn.PATH) @PathVariable("artNo") Integer artNo
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"tag\" : \"tag\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
